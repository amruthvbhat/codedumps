package javasample.exception;

// Java Program to Illustrate Checked Exceptions
// Where FileNotFoundException does not occur

// Importing I/O classes
import java.io.*;

// Main class
class Checked {

	// Main driver method
	public static void main(String[] args)
		throws IOException
	{

		// Creating a file and reading from local repository
		FileReader file = new FileReader("C:\\test\\a.txt");

		// Reading content inside a file
		BufferedReader fileInput = new BufferedReader(file);

		// Printing first 3 lines of file "C:\test\a.txt"
		for (int counter = 0; counter < 3; counter++)
			System.out.println(fileInput.readLine());

		// Closing all file connections
		// using close() method
		// Good practice to avoid any memory leakage
		fileInput.close();
	}
}


package javasample.exception;

public class throws_demo {
	// Java program to demonstrate working of throws

		// This method throws an exception
		// to be handled
		// by caller or caller
		// of caller and so on.
		static void fun() throws IllegalAccessException
		{
			System.out.println("Inside fun(). ");
			throw new IllegalAccessException("demo");
		}

		// This is a caller function
		public static void main(String args[])
		{
			try {
				fun();
			}
			catch (IllegalAccessException e) {
				System.out.println("caught in main.");
			}
		}
	


}


package javasample.exception;

public class try_catch_finally_demo {
	public static void main(String[] args)
    {
        int a = 10, b = 5, c = 5, result;
        try {
            result = a / (b - c);
            System.out.println("result" + result);
        }
 
        catch (ArithmeticException e) {
            System.out.println("Exception caught:Division by zero");
        }
 
        finally {
            System.out.println("I am in final block");
        }
    }

}


package javasample.exception;

public class Unchecked {
	// Java Program to Illustrate Un-checked Exceptions

	// Main class


		// Main driver method
		public static void main(String args[])
		{
			// Here we are dividing by 0
			// which will not be caught at compile time
			// as there is no mistake but caught at runtime
			// because it is mathematically incorrect
			int x = 0;
			int y = 10;
			int z = y / x;
		}
	


}
package javasample.exception.Built_in_exceptions;

public class Arithmetic {
	// Java program to demonstrate ArithmeticException

		public static void main(String args[])
		{
			try {
				int a = 30, b = 0;
				int c = a/b; // cannot divide by zero
				System.out.println ("Result = " + c);
			}
			catch(ArithmeticException e) {
				System.out.println ("Can't divide a number by 0");
			}
		}
	


}
package javasample.exception.Built_in_exceptions;

//Java program to demonstrate ArrayIndexOutOfBoundException
class ArrayIndexOutOfBound_Demo
{
	public static void main(String args[])
	{
		try{
			int a[] = new int[5];
			a[6] = 9; // accessing 7th element in an array of
					// size 5
		}
		catch(ArrayIndexOutOfBoundsException e){
			System.out.println ("Array Index is Out Of Bounds");
		}
	}
}
package javasample.exception.Built_in_exceptions;

//Java program to demonstrate ClassNotFoundException
public class ClassNotFoundException_Demo
{
	public static void main(String[] args) {
		try{
			Class.forName("Class1"); // Class1 is not defined
		}
		catch(ClassNotFoundException e){
			System.out.println(e);
			System.out.println("Class Not Found...");
		}
	}
}
package javasample.exception.Built_in_exceptions;
//Java program to demonstrate FileNotFoundException
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
class File_notFound_Demo {

	public static void main(String args[]) {
		try {

			// Following file does not exist
			File file = new File("E://file.txt");

			FileReader fr = new FileReader(file);
		} catch (FileNotFoundException e) {
		System.out.println("File does not exist");
		}
	}
}
package javasample.exception.Built_in_exceptions;
import java.util.*;
//Java program to demonstrate IOException
class IOException_Demo {

	public static void main(String[] args)
	{

		// Create a new scanner with the specified String
		// Object
		Scanner scan = new Scanner("Hello Geek!");

		// Print the line
		System.out.println("" + scan.nextLine());

		// Check if there is an IO exception
		System.out.println("Exception Output: "
						+ scan.ioException());

		scan.close();
	}
}
package javasample.exception.Built_in_exceptions;
//Java program to demonstrate NoSuchElementException

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.*;
public class NoSuchElementException_Demo {

	public static void main(String[] args)
	{

		Set exampleleSet = new HashSet();

		Hashtable exampleTable = new Hashtable();

		exampleleSet.iterator().next();
		//accessing Set
	
		exampleTable.elements().nextElement();
		//accessing Hashtable
	
		// This throws a NoSuchElementException as there are
		// no elements in Set and HashTable and we are
		// trying to access elements
	}
}

package javasample.exception.Built_in_exceptions;

//Java program to demonstrate NullPointerException
class NullPointer_Exception
{
	public static void main(String args[])
	{
		try {
			String a = null; //null value
			System.out.println(a.charAt(0));
		} catch(NullPointerException e) {
			System.out.println("NullPointerException..");
		}
	}
}
package javasample.exception.Built_in_exceptions;
//Java program to demonstrate NumberFormatException
class NumberFormat_Demo
{
	public static void main(String args[])
	{
		try {
			// "akki" is not a number
			int num = Integer.parseInt ("akki") ;

			System.out.println(num);
		} catch(NumberFormatException e) {
			System.out.println("Number format exception");
		}
	}
}
package javasample.exception.Built_in_exceptions;
//Java program to demonstrate StringIndexOutOfBoundsException
class StringIndexOutOfBound_Demo
{
	public static void main(String args[])
	{
		try {
			String a = "This is like chipping "; // length is 22
			char c = a.charAt(24); // accessing 25th element
			System.out.println(c);
		}
		catch(StringIndexOutOfBoundsException e) {
			System.out.println("StringIndexOutOfBoundsException");
		}
	}
}package javasample.exception.Chained_Exceptions;

public class ExceptionExample {
	
		public static void main(String[] args) {
			try {
				// code that might throw an exception
				int[] numbers = new int[5];
				int divisor = 0;
				for (int i = 0; i < numbers.length; i++) {
					int result = numbers[i] / divisor;
					System.out.println(result);
				}
			} catch (ArithmeticException e) {
				// create a new exception with the original exception as the cause
				throw new RuntimeException("Error: division by zero", e);
			}
		}
	}

package javasample.exception.Chained_Exceptions;

public class ExceptionHandling {
	
	
	// Java program to demonstrate working of chained exceptions
	
		public static void main(String[] args)
		{
			try
			{
				// Creating an exception
				NumberFormatException ex =
						new NumberFormatException("Exception");

				// Setting a cause of the exception
				ex.initCause(new NullPointerException(
						"This is actual cause of the exception"));

				// Throwing an exception with cause.
				throw ex;
			}

			catch(NumberFormatException ex)
			{
				// displaying the exception
				System.out.println(ex);

				// Getting the actual cause of the exception
				System.out.println(ex.getCause());
			}
		}
	


}
package javasample.exception.Flow_control_in_try_catch_finally;

public class ControlFlow__try_catch_finally {
	
	public static void main (String[] args)
    {
         
        // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }

}
package javasample.exception.Flow_control_in_try_catch_finally;

public class ControlFlow__try_catch {
	
	public static void main (String[] args)
    {
         
        // array of size 4.
        int[] arr = new int[4];
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in Catch block");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch clause");
    }

}
